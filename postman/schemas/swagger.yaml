openapi: 3.0.3
info:
  title: Private Services API  - OpenAPI 3.0
  description: 'This is the set of api endpoints to support access to Subscripify
    Super Services. Super Services are those that are available to Subscripify
    super tenants. They provide higher capabilities to super tenants to manage across
    multiple main tenants within the context of the Super-Tenant.<br><br> These
    APIs act as the front end to Private Services engineered and hosted by super
    tenants that need to access the subscripify platform.<br><br>Examples of super
    services available only to Super Tenants through this API are- <br>Tenant
    Management<br>Subscription and Plan Management <br>Billing and Payments<br><br>
    Subscripify also maintains a set of api endpoints to support access to Subscripify
    Public Services. Subscripify public services are services required by all tenants
    and users on the subscripify platform. All tenants, regardless of type have
    access to these services.<br><br>Examples of private services available to
    Super Tenants and to Main Tenants are- <br>Identity Services<br>Usage Analytics
    Services<br>For more information about Subscripify tenant architecture
    click here.'
  termsOfService: http://www.subscripify.com/terms/apiusage
  contact:
    email: william.ohara@subscripify.com
  license:
    name: Private
    url: http://www.subscripify.com/license
  version: 0.0.1
externalDocs:
  description: Find out more about Subscripify
  url: http://www.subscripify.com
servers:
- url: https://lord-tenant.subscripify.com
tags:
- name: tenants
  description: everything needed to create and manage tenants on the Subscripify platform
  externalDocs:
    description: Link to Tenant Architecture Doc
    url: http://wiki.subscripify.com/tenant-architecture
- name: subscription
  description: everything subscriptions
  externalDocs:
    description: Find out more about our store
    url: http://wiki.subscripify.com/tenant-architecture
paths:
  /lord-tenants:
    post:
      tags:
      - tenants
      summary: Add a new lord tenant
      description: Adds a new lord tenant to the subscripify tenant system. This will
        start a new Kubernetes cluster on the selected cloud service
      operationId: addLordTenant
      requestBody:
        description: All data required to start a new lord tenant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lordTenantCreateBody'
        required: true
      responses:
        '200':
          description: Successful operation returns the new object UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantUUIDCreatedObject'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '406':
          $ref: '#/components/responses/406'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
      # security:
      # - tenant_auth:
      #   - write:lord-tenants
  /tenants:
    post:
      tags:
      - tenants
      summary: Add a new main or super tenant 
      description: Adds a new tenant to the selected liege tenant in liegeUUID header parameter. The liege UUID must be a lord tenant if creating a super tenant and liege UUID must be a super tenant if creating a main tenant.
      operationId: addTenant 
      parameters:
        - $ref: '#/components/parameters/liegeUUIDHeader'
      requestBody:
        description: All data required to start a new super or main  tenant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tenantCreateBody'
        required: true
      responses: 
        '200':
          description: Successful operation returns the new object UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantUUIDCreatedObject'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '406':
          $ref: '#/components/responses/406'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
      # security:
      # - tenant_auth:
      #   - write:lord-tenants
      #   - write:super-tenants
  /tenants/{targetTenantUUID}:
    get:
      summary: returns a tenant
      description: returns a tenant
      tags:
        - "tenants"
      operationId: getTenant
      parameters:
        - $ref: '#/components/parameters/targetTenantUUIDPath'
      responses:
        '200':
          description: return tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fullTenantObject'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '406':
          $ref: '#/components/responses/406'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
    patch:
      summary: updates a tenant
      description: updates a tenant
      tags:
        - "tenants"
      operationId: updateTenant
      parameters:
        - $ref: '#/components/parameters/targetTenantUUIDPath'
      requestBody:
        description: All data required to start a new super or main  tenant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tenantPatchBody'
      responses:
        '200':
          description: return tenant
          content:
            application/json:
              schema:
                oneOf:
                $ref: '#/components/schemas/fullTenantObject'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '406':
          $ref: '#/components/responses/406'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
    delete:
      summary: removes a tenant
      description: removes a tenant
      tags:
        - "tenants"
      operationId: deleteTenant
      parameters:
        - $ref: '#/components/parameters/targetTenantUUIDPath'
      responses:
        '200':
          description: return tenant
          content:
            application/json:
              schema:
                oneOf:
                $ref: '#/components/schemas/fullTenantObject'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '406':
          $ref: '#/components/responses/406'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  /search/tenants:
    get:
      tags: 
      - tenants
      summary: Tenant Search
      description: Search for tenants based upon the input parameters available
      operationId: searchTenant
      parameters:
        - $ref: '#/components/parameters/liegeUUIDHeader'
        - $ref: '#/components/parameters/searchTypeQuery'
        - $ref: '#/components/parameters/searchTenantUUIDQuery'
        - $ref: '#/components/parameters/searchTenantAliasQuery'
        - $ref: '#/components/parameters/searchSubdomainQuery'
        - $ref: '#/components/parameters/searchDomainQuery'
        - $ref: '#/components/parameters/searchConfigAliasQuery'
        - $ref: '#/components/parameters/searchConfigQuery'
        - $ref: '#/components/parameters/searchAccessAliasQuery'
        - $ref: '#/components/parameters/searchAccessQuery'
      responses: 
        '200':
          description: Successful operation returns full tenant data including generated
            felids
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/tenantSearchResults'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '406':
          $ref: '#/components/responses/406'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
components:
  parameters:
    liegeUUIDHeader:
      name: liegeUUID
      description: 'Liege is the tenant that manages the target tenant. In the case of adding a tenant, this header is required 
        and establishes the feudal relationship between the creator tenant and the created tenant. <br><br> In the case of tenant updates or 
        deletes this field holds the liege of the target tenant. If the two ids do not have the appropriate relationship the action will fail.
        <br><br>This field is also checked against the identity of the caller. The identity must be a member of the Liege tenant and must have the
        appropriate permissions.'
      in: header
      required: true
      schema: 
        type: string
        pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
    targetTenantUUIDPath:
      name: targetTenantUUID
      in: path
      required: true
      schema:
        maxLength: 36
        pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        type: string
        description: 'This is the UUID of the target tenant. The target tenant must belong to the liege tenant in the liegeUUID header.'
    recordStart:
      name: ls 
      in: query
      required: false
      schema:
        type: integer
        description: the starting record from a requested list of tenants - if you want your resposne to start with the 100th row, set this paramter to 100 - if left out api assumes first record as start
    recordCount:
      name: lc 
      in: query
      required: false
      schema:
        type: integer
        description: the number of rows to return from and including the starting record from the record start paramter
    searchTypeQuery:
      name: type 
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          maxLength: 5
          pattern: ^(lord|super|main)$`
          description: 'A full name for either a main, lord, or super tenant for a private or custom access config. Can have multiple.'
        minItems: 1
      style: pipeDelimited
    searchTenantUUIDQuery:
      name: tid
      in: query
      required: false
      schema:
        type: array
        items: 
          type: string 
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          description: the UUID for a tenant
        minItems: 1
      style: pipeDelimited
    searchTenantAliasQuery:
      name: tal
      in: query
      required: false
      schema:
        type: array
        items:
          maxLength: 36
          type: string
          description: 'A partial or whole tenant alias.'
        minItems: 1
      style: pipeDelimited

    searchSubdomainQuery:
      name: subdmn
      in: query
      required: false
      schema:
        type: array
        items: 
          type: string
          maxLength: 61
          description: 'A partial or whole subdomain name.'    
        minItems: 1
      style: pipeDelimited  
    searchDomainQuery:
      name: dmn
      in: query
      required: false
      schema:
        type: array
        items: 
          type: string
          maxLength: 61
          description: 'A partial or whole domain name - can contain top level domain.'    
        minItems: 1
      style: pipeDelimited  
    searchConfigAliasQuery:
      name: cal
      in: query
      required: false
      schema:
        type: array
        items:
          maxLength: 36
          type: string
          description: 'A partial or whole alias for a lord, super, or public services config. can have multiple aliases in the same 
            query string using it more than once'
        minItems: 1
      style: pipeDelimited
    searchConfigQuery:
      name: cid
      in: query
      required: false
      schema:
        type: array
        items: 
          type: string
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          description: 'A  whole UUID for a lord, super, or public services config. No partials, must be full UUID or search will fail.
            Can have up to three cids in the same url'
        minItems: 1
      style: pipeDelimited
    searchAccessAliasQuery:
      name: aal 
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          maxLength: 36
          description: 'A partial or whole alias for a private or custom access config. Can have multiple.'
        minItems: 1
      style: pipeDelimited   
    searchAccessQuery:
      name: aid
      in: query
      required: false
      schema:
        type: array
        minItems: 1
        items:
          type: string
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          description: A whole UUID for a private or custom access config id. No partials, must be a full UUID or search will fail. Can have up to two in a URL. Any more will be ignored.
      style: pipeDelimited
    
    
  schemas:
    tenantPatchBody:
      type: object
      properties:
        tenantAlias: 
          maxLength: 36
          pattern: '^([a-zA-Z0-9]|(?:[a-zA-Z0-9]+[a-zA-Z0-9.\s\-]*[a-zA-Z0-9]+))$'
          type: string
          description: The alias name does not need to be unique and is used for quick reference when searching in UI. 
            No starting spaces and no special characters.
          example: "my tenant alias"
        lordServicesConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The services config UUID to use for the lord tenant. Must be a valid services config UUID
        superServicesConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The services config UUID to use for the super-tenant. Must
            be a valid services config UUID
        publicServicesConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The services config UUID to use for the main-tenant's public
            services. The services config UUID  used must be a publicServices UUID
            and belong to the liege tenant
        privateAccessConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The private access config UUID to use for the tenant's public
            services. Must be a valid private access UUID. This value must be empty when creating a main tenant.
        customAccessConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The public access config UUID to use for the tenant's public
            services. Must be a valid public access UUID.
    lordTenantCreateBody:
      type: object
      properties:
        tenantAlias: 
          maxLength: 36
          pattern: '^([a-zA-Z0-9]|(?:[a-zA-Z0-9]+[a-zA-Z0-9.\s\-]*[a-zA-Z0-9]+))$'
          type: string
          description: The alias name does not need to be unique and is used for quick reference when searching in UI. 
            No starting spaces and no special characters.
          example: "my tenant alias"
        topLevelDomain:
          maxLength: 15
          type: string
          description: 'Sets the top level domain for the tenant - validates against ICANN/IANA list https://data.iana.org/TLD/tlds-alpha-by-domain.txt
            e.g. "com" from my-tenant.subscripify.com'
          example: com
        secondaryDomain:
          maxLength: 30
          pattern: '^([a-zA-Z0-9]|(?:[a-zA-Z0-9]+[a-zA-Z0-9.-]*[a-zA-Z0-9]+))$'
          type: string
          description: 'Sets the secondary domain name for the tenant. e.g. "subscripify" from my-tenant.subscripify.com'
          example: subscripify
        subdomain:
          maxLength: 30
          pattern: '^([a-zA-Z0-9]|(?:[a-zA-Z0-9]+[a-zA-Z0-9.-]*[a-zA-Z0-9]+))$'
          type: string
          description: 'Sets the secondary domain name for the tenant. e.g. "my-tenant" from my-tenant.subscripify.com. Also used for the kubernetes namespace prefix for this tenant'
          example: "my-tenant" 
        lordServicesConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The services config UUID to use for the lord tenant. Must be a valid services config UUID
        superServicesConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The services config UUID to use for the super-tenant. Must
            be a valid services config UUID
        publicServicesConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The services config UUID to use for the main-tenant's public
            services. The services config UUID  used must be a publicServices UUID
            and belong to the liege tenant
        subscripifyDeploymentCloudLocation:
          maxLength: 10
          pattern: azure
          type: string
          description: The cloud provider to deploy to. e.g. The only cloud provider
            supported (currently) is azure.
      additionalProperties: false
    tenantCreateBody:
      type: object
      properties:
        tenantType:
          maxLength: 5
          pattern: ^super|main$
          type: string
          description: Indicate which type of tenant to establish, main or super.
        tenantAlias: 
          maxLength: 36
          pattern: '^([a-zA-Z0-9]|(?:[a-zA-Z0-9]+[a-zA-Z0-9.\s\-]*[a-zA-Z0-9]+))$'
          type: string
          description: The alias name does not need to be unique and is used for quick reference when searching in UI. 
            No starting spaces and no special characters.
          example: "my tenant alias"  
        subdomain:
          maxLength: 30
          pattern: '^([a-zA-Z0-9]|(?:[a-zA-Z0-9]+[a-zA-Z0-9.-]*[a-zA-Z0-9]+))$'
          type: string
          description: The subdomain name string which used for the services namespace
            of the tenant and providing unique url for each tenant
          example: subscripify
        superServicesConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The services config UUID to use for a super tenant. Must
            be a valid services config UUID. This value must be empty when creating a main tenant.
        publicServicesConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The services config UUID to use for the tenant's public
            services. Must be a valid public services UUID. 
        privateAccessConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The private access config UUID to use for the tenant's public
            services. Must be a valid private access UUID. This value must be empty when creating a main tenant.
        customAccessConfig:
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          type: string
          description: The public access config UUID to use for the tenant's public
            services. Must be a valid public access UUID.
      additionalProperties: false
    tenantUUIDCreatedObject:
      type: object
      properties:
        tenantUUID:
          type: string
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
    tenantSearchResults:
      type: array
      items:
        type: object
        properties:
          tenantUUID:
            type: string
            pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          tenantAlias:
            type: string
            description: The name of the organization at time of tenant creation and the alias used for searching by org name.
          tenantSubdomain:
            type: string
            description: the subdomain of the tenant
          tenantSecDomain:
            type: string
            description: the secondary domain of the tenant - does not include the top level domain
          tenantTld:
            type: string
            description: the top level domain of the tenant
          tenantType:
            maxLength: 5
            pattern: ^super|lord|main$
            type: string
            description: Indicate which type of tenant. Lord tenants will see both "super" and "main" tenant types. 
              Super tenants will only see "main" tenant types. 
          lordConfigAlias:
            type: string 
            description: the lord config alias of the tenant - non lord tenants will be blank
          lordConfigUUID:
            type: string
            description: the lord config UUID of the tenant - non lord tenants will be blank
          superConfigAlias:
            type: string 
            description: the super config alias of the tenant - non super tenants will be blank
          superConfigUUID:
            type: string
            description: the super config UUID of the tenant - non super tenants will be blank
          publicConfigAlias:
            type: string 
            description: the public config alias of the tenant
          publicConfigUUID:
            type: string
            description: the public config UUID of the tenant
          privateAccessAlias:
            type: string 
            description: the private access config (if applicable) alias of the tenant
          privateAccessUUID:
            type: string
            description: the private access config (if applicable) UUID of the tenant
          customAccessAlias:
            type: string 
            description: the custom access config (if applicable) alias of the tenant
          customAccessUUID:
            type: string
            description: the custom access config (if applicable) UUID of the tenant 
      maxItems: 100
    extendedTenantObject:
      type: object
      properties:
        tenantUUID:
          type: string
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          readOnly: true
        kubeNamespacePrefix:
          type: string
          maxLength: 32
          description: The name prefix for the Kubernetes namespaces and cloud resources that make up this tenant.
          readOnly: true
        liegeUUID:
          type: string
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          description: The UUID of this tenant's owner tenant. This value is equal to lordUUID for super tenants
          readOnly: true
        lordUUID:
          type: string
          maxLength: 36
          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
          description: The UUID of this tenant's lord tenant
          readOnly: true
        createTimestamp:
          type: string
          readOnly: true
        createdBy:
          type: string
          readOnly: true
    fullTenantObject:
      allOf:
        - $ref: '#/components/schemas/lordTenantCreateBody'
        - $ref: '#/components/schemas/tenantCreateBody'
        - $ref: '#/components/schemas/extendedTenantObject' 
    # lordTenantObject:
    #   allOf:
    #     - $ref: '#/components/schemas/lordTenantCreateBody'
    #     - $ref: '#/components/schemas/extendedTenantObject'
    httpResponseMessage:
      type: object
      properties:
        responseCode:
          type: integer
        message:
          maxLength: 200
          type: string
      additionalProperties: false
      
  responses:
    '401':
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponseMessage'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/httpResponseMessage'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/httpResponseMessage'
    '405':
      description: Invalid method
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/httpResponseMessage'
    '406':
      description: Improper Protocol
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/httpResponseMessage'
    '409':
      description: Resource Already Exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/httpResponseMessage'
    '415':
      description: Improper media type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/httpResponseMessage'
    '429':
      description: too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/httpResponseMessage'
    default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/httpResponseMessage'
  # securitySchemes:
  #   tenant_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: https://petstore3.swagger.io/oauth/authorize
  #         scopes:
  #           write:pets: modify pets in your account
  #           read:pets: read your pets
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header
