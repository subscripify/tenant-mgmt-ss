/*
 * Private Services API  - OpenAPI 3.0
 *
 * This is the set of api endpoints to support access to Subscripify Super Services. Super Services are those that are available to Subscripify super tenants. They provide higher capabilities to super tenants to manage across multiple main tenants within the context of the Super-Tenant.<br><br> These APIs act as the front end to Private Services engineered and hosted by super tenants that need to access the subscripify platform.<br><br>Examples of super services available only to Super Tenants through this API are- <br>Tenant Management<br>Subscription and Plan Management <br>Billing and Payments<br><br> Subscripify also maintains a set of api endpoints to support access to Subscripify Public Services. Subscripify public services are services required by all tenants and users on the subscripify platform. All tenants, regardless of type have access to these services.<br><br>Examples of private services available to Super Tenants and to Main Tenants are- <br>Identity Services<br>Usage Analytics Services<br>For more information about Subscripify tenant architecture click here.
 *
 * API version: 0.0.1
 * Contact: william.ohara@subscripify.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tenantapi

import (
	"encoding/json"
	"net/http"

	tenant "dev.azure.com/Subscripify/subscripify-prod/_git/tenant-mgmt-ss/tenant"
)

// reads the generated response from the tenant package and sends the response
func AddLordTenant(w http.ResponseWriter, r *http.Request) {
	var wo TenantUuidCreatedObject
	var hr HttpResponseError
	var jsonResp []byte

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	defer r.Body.Close()
	dec := json.NewDecoder(r.Body)
	var lordTenantCreateBody LordTenantCreateBody
	if err := dec.Decode(&lordTenantCreateBody); err != nil {

		hr.Message = "bad json"
		hr.ResponseCode = http.StatusBadRequest
		jsonResp, _ = json.Marshal(hr)
	} else {
		resp := tenant.NewLordTenant(
			lordTenantCreateBody.TenantAlias,
			lordTenantCreateBody.TopLevelDomain,
			lordTenantCreateBody.SecondaryDomain,
			lordTenantCreateBody.Subdomain,
			lordTenantCreateBody.LordServicesConfig,
			lordTenantCreateBody.SuperServicesConfig,
			lordTenantCreateBody.PublicServicesConfig,
			tenant.Azure,
			"william.ohara@subscripify.com").GetHttpResponse()

		hr.Message = resp.Message
		hr.ResponseCode = int32(resp.HttpResponseCode)
		if hr.ResponseCode == 200 {
			wo.TenantUUID = resp.NewTenant.TenantUUID

			jsonResp, _ = json.Marshal(wo)

		} else {
			jsonResp, _ = json.Marshal(hr)
		}

	}

	w.WriteHeader(int(hr.ResponseCode))
	w.Write(jsonResp)

}

func AddTenant(w http.ResponseWriter, r *http.Request) {
	var wo TenantUuidCreatedObject
	var hr HttpResponseError
	var jsonResp []byte

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	defer r.Body.Close()
	dec := json.NewDecoder(r.Body)
	var tenantCreateBody TenantCreateBody
	if err := dec.Decode(&tenantCreateBody); err != nil {
		hr.Message = "bad json"
		hr.ResponseCode = http.StatusBadRequest
		jsonResp, _ = json.Marshal(hr)
	} else {
		resp := tenant.NewTenant(
			tenantCreateBody.TenantType,
			tenantCreateBody.TenantAlias,
			tenantCreateBody.Subdomain,
			tenantCreateBody.SuperServicesConfig,
			tenantCreateBody.PublicServicesConfig,
			tenantCreateBody.PrivateAccessConfig,
			tenantCreateBody.PublicAccessConfig,
			r.Header.Get("liegeUUID"),
			"william.ohara@subscripify.com").GetHttpResponse()

		hr.Message = resp.Message
		hr.ResponseCode = int32(resp.HttpResponseCode)
		if hr.ResponseCode == 200 {
			wo.TenantUUID = resp.NewTenant.TenantUUID

			jsonResp, _ = json.Marshal(wo)

		} else {
			jsonResp, _ = json.Marshal(hr)
		}

	}

	w.WriteHeader(int(hr.ResponseCode))
	w.Write(jsonResp)
}

func DeleteTenant(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetTenant(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func SearchTenant(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UpdateTenant(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
