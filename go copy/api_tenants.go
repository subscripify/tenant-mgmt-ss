/*
 * Private Services API  - OpenAPI 3.0
 *
 * This is the set of api endpoints to support access to Subscripify Super Services. Super Services are those that are available to Subscripify super tenants. They provide higher capabilities to super tenants to manage across multiple main tenants within the context of the Super-Tenant.<br><br> These APIs act as the front end to Private Services engineered and hosted by super tenants that need to access the subscripify platform.<br><br>Examples of super services available only to Super Tenants through this API are- <br>Tenant Management<br>Subscription and Plan Management <br>Billing and Payments<br><br> Subscripify also maintains a set of api endpoints to support access to Subscripify Public Services. Subscripify public services are services required by all tenants and users on the subscripify platform. All tenants, regardless of type have access to these services.<br><br>Examples of private services available to Super Tenants and to Main Tenants are- <br>Identity Services<br>Usage Analytics Services<br>For more information about Subscripify tenant architecture click here.
 *
 * API version: 0.0.1
 * Contact: william.ohara@subscripify.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tenantapi

import (
	"encoding/json"
	"net/http"
	"strconv"

	tenant "dev.azure.com/Subscripify/subscripify-prod/_git/tenant-mgmt-ss/tenant"
	"github.com/google/uuid"
	"github.com/gorilla/mux"
)

// reads the request body, decodes JSON and sends data to tenant package.
// the tenant Package generates and send the appropriate response data
// this function sends then sends the data
func AddLordTenant(w http.ResponseWriter, r *http.Request) {
	var wo TenantUuidCreatedObject
	var hr HttpResponseError
	var jsonResp []byte

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	defer r.Body.Close()
	dec := json.NewDecoder(r.Body)
	var lordTenantCreateBody LordTenantCreateBody
	if err := dec.Decode(&lordTenantCreateBody); err != nil {

		hr.Message = "bad json"
		hr.ResponseCode = http.StatusBadRequest
		jsonResp, _ = json.Marshal(hr)
	} else {

		resp := tenant.NewLordTenant(
			lordTenantCreateBody.TenantAlias,
			lordTenantCreateBody.TopLevelDomain,
			lordTenantCreateBody.SecondaryDomain,
			lordTenantCreateBody.Subdomain,
			lordTenantCreateBody.LordServicesConfig,
			lordTenantCreateBody.SuperServicesConfig,
			lordTenantCreateBody.PublicServicesConfig,
			tenant.Azure,
			"william.ohara@subscripify.com").GetHttpResponse()

		hr.Message = resp.Message
		hr.ResponseCode = int32(resp.HttpResponseCode)
		if hr.ResponseCode == 200 {
			wo.TenantUUID = resp.NewTenant.TenantUUID

			jsonResp, _ = json.Marshal(wo)

		} else {
			jsonResp, _ = json.Marshal(hr)
		}

	}

	w.WriteHeader(int(hr.ResponseCode))
	w.Write(jsonResp)

}

func AddTenant(w http.ResponseWriter, r *http.Request) {
	var wo TenantUuidCreatedObject
	var hr HttpResponseError
	var jsonResp []byte

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	defer r.Body.Close()
	dec := json.NewDecoder(r.Body)
	var tenantCreateBody TenantCreateBody
	if err := dec.Decode(&tenantCreateBody); err != nil {
		hr.Message = "bad json"
		hr.ResponseCode = http.StatusBadRequest
		jsonResp, _ = json.Marshal(hr)
	} else {
		resp := tenant.NewTenant(
			tenantCreateBody.TenantType,
			tenantCreateBody.TenantAlias,
			tenantCreateBody.Subdomain,
			tenantCreateBody.SuperServicesConfig,
			tenantCreateBody.PublicServicesConfig,
			tenantCreateBody.PrivateAccessConfig,
			tenantCreateBody.CustomAccessConfig,
			r.Header.Get("liegeUUID"),
			"william.ohara@subscripify.com").GetHttpResponse()

		hr.Message = resp.Message
		hr.ResponseCode = int32(resp.HttpResponseCode)
		if hr.ResponseCode == 200 {
			wo.TenantUUID = resp.NewTenant.TenantUUID

			jsonResp, _ = json.Marshal(wo)

		} else {
			jsonResp, _ = json.Marshal(hr)
		}

	}

	w.WriteHeader(int(hr.ResponseCode))
	w.Write(jsonResp)
}

func DeleteTenant(w http.ResponseWriter, r *http.Request) {
	var wo FullTenantObject
	var hr HttpResponseError
	var jsonResp []byte

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	targetTenantUUID := mux.Vars(r)["targetTenantUUID"]
	resp := tenant.DeleteTenant(targetTenantUUID, "william.ohara@subscripify.com").GetHttpResponse()
	hr.Message = resp.Message
	hr.ResponseCode = int32(resp.HttpResponseCode)
	if hr.ResponseCode == 200 {
		if resp.FullTenant.TenantType != "" {
			wo.TenantType = resp.FullTenant.TenantType
		}
		if resp.FullTenant.Alias != "" {
			wo.TenantAlias = resp.FullTenant.Alias
		}
		if resp.FullTenant.Subdomain != "" {
			wo.Subdomain = resp.FullTenant.Subdomain
		}
		if resp.FullTenant.SecondaryDomain != "" {
			wo.SecondaryDomain = resp.FullTenant.SecondaryDomain
		}
		if resp.FullTenant.KubeNamespacePrefix != "" {
			wo.KubeNamespacePrefix = resp.FullTenant.KubeNamespacePrefix
		}
		if resp.FullTenant.TopLevelDomain != "" {
			wo.TopLevelDomain = resp.FullTenant.TopLevelDomain
		}
		if resp.FullTenant.SubscripifyDeploymentCloudLocation != "" {
			wo.SubscripifyDeploymentCloudLocation = resp.FullTenant.SubscripifyDeploymentCloudLocation
		}
		if resp.FullTenant.CreatedBy != "" {
			wo.CreatedBy = resp.FullTenant.CreatedBy
		}
		if resp.FullTenant.TenantUUID != uuid.Nil {
			wo.TenantUUID = resp.FullTenant.TenantUUID.String()
		}
		if resp.FullTenant.SuperServicesConfig != uuid.Nil {
			wo.SuperServicesConfig = resp.FullTenant.SuperServicesConfig.String()
		}
		if resp.FullTenant.LordServicesConfig != uuid.Nil {
			wo.LordServicesConfig = resp.FullTenant.LordServicesConfig.String()
		}
		if resp.FullTenant.PublicServicesConfig != uuid.Nil {
			wo.PublicServicesConfig = resp.FullTenant.PublicServicesConfig.String()
		}
		if resp.FullTenant.PrivateAccessConfig != uuid.Nil {
			wo.PrivateAccessConfig = resp.FullTenant.PrivateAccessConfig.String()
		}
		if resp.FullTenant.CustomAccessConfig != uuid.Nil {
			wo.CustomAccessConfig = resp.FullTenant.CustomAccessConfig.String()
		}
		if resp.FullTenant.LordUUID != uuid.Nil {
			wo.LordUUID = resp.FullTenant.LordUUID.String()
		}
		if resp.FullTenant.LiegeUUID != uuid.Nil {
			wo.LiegeUUID = resp.FullTenant.LiegeUUID.String()
		}
		wo.CreateTimestamp = resp.FullTenant.CreateTimestamp.String()

		jsonResp, _ = json.Marshal(wo)

	} else {
		jsonResp, _ = json.Marshal(hr)
	}
	w.WriteHeader(int(hr.ResponseCode))
	w.Write(jsonResp)
}

func GetTenant(w http.ResponseWriter, r *http.Request) {
	var wo FullTenantObject
	var hr HttpResponseError
	var jsonResp []byte

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	targetTenantUUID := mux.Vars(r)["targetTenantUUID"]
	resp := tenant.GetTenant(targetTenantUUID, "william.ohara@subscripify.com").GetHttpResponse()
	hr.Message = resp.Message
	hr.ResponseCode = int32(resp.HttpResponseCode)
	if hr.ResponseCode == 200 {
		if resp.FullTenant.TenantType != "" {
			wo.TenantType = resp.FullTenant.TenantType
		}
		if resp.FullTenant.Alias != "" {
			wo.TenantAlias = resp.FullTenant.Alias
		}
		if resp.FullTenant.Subdomain != "" {
			wo.Subdomain = resp.FullTenant.Subdomain
		}
		if resp.FullTenant.SecondaryDomain != "" {
			wo.SecondaryDomain = resp.FullTenant.SecondaryDomain
		}
		if resp.FullTenant.KubeNamespacePrefix != "" {
			wo.KubeNamespacePrefix = resp.FullTenant.KubeNamespacePrefix
		}
		if resp.FullTenant.TopLevelDomain != "" {
			wo.TopLevelDomain = resp.FullTenant.TopLevelDomain
		}
		if resp.FullTenant.SubscripifyDeploymentCloudLocation != "" {
			wo.SubscripifyDeploymentCloudLocation = resp.FullTenant.SubscripifyDeploymentCloudLocation
		}
		if resp.FullTenant.CreatedBy != "" {
			wo.CreatedBy = resp.FullTenant.CreatedBy
		}
		if resp.FullTenant.TenantUUID != uuid.Nil {
			wo.TenantUUID = resp.FullTenant.TenantUUID.String()
		}
		if resp.FullTenant.SuperServicesConfig != uuid.Nil {
			wo.SuperServicesConfig = resp.FullTenant.SuperServicesConfig.String()
		}
		if resp.FullTenant.LordServicesConfig != uuid.Nil {
			wo.LordServicesConfig = resp.FullTenant.LordServicesConfig.String()
		}
		if resp.FullTenant.PublicServicesConfig != uuid.Nil {
			wo.PublicServicesConfig = resp.FullTenant.PublicServicesConfig.String()
		}
		if resp.FullTenant.PrivateAccessConfig != uuid.Nil {
			wo.PrivateAccessConfig = resp.FullTenant.PrivateAccessConfig.String()
		}
		if resp.FullTenant.CustomAccessConfig != uuid.Nil {
			wo.CustomAccessConfig = resp.FullTenant.CustomAccessConfig.String()
		}
		if resp.FullTenant.LordUUID != uuid.Nil {
			wo.LordUUID = resp.FullTenant.LordUUID.String()
		}
		if resp.FullTenant.LiegeUUID != uuid.Nil {
			wo.LiegeUUID = resp.FullTenant.LiegeUUID.String()
		}
		wo.CreateTimestamp = resp.FullTenant.CreateTimestamp.String()

		jsonResp, _ = json.Marshal(wo)

	} else {
		jsonResp, _ = json.Marshal(hr)
	}
	w.WriteHeader(int(hr.ResponseCode))
	w.Write(jsonResp)
}

func SearchTenant(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	var hr HttpResponseError
	var jsonResp []byte
	pageNum, err := strconv.Atoi(r.URL.Query().Get("pg"))
	if err != nil {
		pageNum = 1
	}

	perPage, err := strconv.Atoi(r.URL.Query().Get("lc"))
	if err != nil {
		perPage = 10
	}
	resp := tenant.ListTenants(
		pageNum,                     // the page number
		perPage,                     // the line count per page
		r.URL.Query().Get("type"),   // tenant type filter
		r.URL.Query().Get("tid"),    // tenant uuid filter
		r.URL.Query().Get("tal"),    // tenant alias filter
		r.URL.Query().Get("subdmn"), //subdomain filter
		r.URL.Query().Get("dmn"),    // domain filter
		r.URL.Query().Get("cid"),    // config Uuid filter
		r.URL.Query().Get("cal"),    // config alias filter
		r.URL.Query().Get("aid"),    // access uuid filter
		r.URL.Query().Get("aal"),    // access alias filter
	).GetHttpResponse()
	hr.ResponseCode = int32(resp.HttpResponseCode)
	if hr.ResponseCode == 200 {
		jsonResp, _ = json.Marshal(&resp.SearchResults)
	} else {
		hr.Message = resp.Message
		jsonResp, _ = json.Marshal(hr)
	}

	w.WriteHeader(int(hr.ResponseCode))

	w.Write(jsonResp)
}

func UpdateTenant(w http.ResponseWriter, r *http.Request) {
	var tenantPatchBody TenantPatchBody
	var wo FullTenantObject
	var hr HttpResponseError
	var jsonResp []byte

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	targetTenantUUID := mux.Vars(r)["targetTenantUUID"]

	dec := json.NewDecoder(r.Body)

	if err := dec.Decode(&tenantPatchBody); err != nil {
		hr.Message = "bad json"
		hr.ResponseCode = http.StatusBadRequest
		jsonResp, _ = json.Marshal(hr)
	} else {

		resp := tenant.UpdateTenant(targetTenantUUID,
			tenantPatchBody.TenantAlias,
			tenantPatchBody.LordServicesConfig,
			tenantPatchBody.SuperServicesConfig,
			tenantPatchBody.PublicServicesConfig,
			tenantPatchBody.PrivateAccessConfig,
			tenantPatchBody.CustomAccessConfig,
			"william.ohara@subscripify.com").GetHttpResponse()

		hr.Message = resp.Message
		hr.ResponseCode = int32(resp.HttpResponseCode)
		if hr.ResponseCode == 200 {
			if resp.FullTenant.TenantType != "" {
				wo.TenantType = resp.FullTenant.TenantType
			}
			if resp.FullTenant.Alias != "" {
				wo.TenantAlias = resp.FullTenant.Alias
			}
			if resp.FullTenant.Subdomain != "" {
				wo.Subdomain = resp.FullTenant.Subdomain
			}
			if resp.FullTenant.SecondaryDomain != "" {
				wo.SecondaryDomain = resp.FullTenant.SecondaryDomain
			}
			if resp.FullTenant.KubeNamespacePrefix != "" {
				wo.KubeNamespacePrefix = resp.FullTenant.KubeNamespacePrefix
			}
			if resp.FullTenant.TopLevelDomain != "" {
				wo.TopLevelDomain = resp.FullTenant.TopLevelDomain
			}
			if resp.FullTenant.SubscripifyDeploymentCloudLocation != "" {
				wo.SubscripifyDeploymentCloudLocation = resp.FullTenant.SubscripifyDeploymentCloudLocation
			}
			if resp.FullTenant.CreatedBy != "" {
				wo.CreatedBy = resp.FullTenant.CreatedBy
			}
			if resp.FullTenant.TenantUUID != uuid.Nil {
				wo.TenantUUID = resp.FullTenant.TenantUUID.String()
			}
			if resp.FullTenant.SuperServicesConfig != uuid.Nil {
				wo.SuperServicesConfig = resp.FullTenant.SuperServicesConfig.String()
			}
			if resp.FullTenant.LordServicesConfig != uuid.Nil {
				wo.LordServicesConfig = resp.FullTenant.LordServicesConfig.String()
			}
			if resp.FullTenant.PublicServicesConfig != uuid.Nil {
				wo.PublicServicesConfig = resp.FullTenant.PublicServicesConfig.String()
			}
			if resp.FullTenant.PrivateAccessConfig != uuid.Nil {
				wo.PrivateAccessConfig = resp.FullTenant.PrivateAccessConfig.String()
			}
			if resp.FullTenant.CustomAccessConfig != uuid.Nil {
				wo.CustomAccessConfig = resp.FullTenant.CustomAccessConfig.String()
			}
			if resp.FullTenant.LordUUID != uuid.Nil {
				wo.LordUUID = resp.FullTenant.LordUUID.String()
			}
			if resp.FullTenant.LiegeUUID != uuid.Nil {
				wo.LiegeUUID = resp.FullTenant.LiegeUUID.String()
			}
			wo.CreateTimestamp = resp.FullTenant.CreateTimestamp.String()

			jsonResp, _ = json.Marshal(wo)

		} else {
			jsonResp, _ = json.Marshal(hr)
		}

	}
	w.WriteHeader(int(hr.ResponseCode))
	w.Write(jsonResp)
}
